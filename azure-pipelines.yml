trigger:
- main

stages:
# ────────────────────────────────────────
# Build: compile, seed DB, test, publish artifacts
# ────────────────────────────────────────
- stage: Build
  displayName: Build the web application
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - task: NodeTool@0
      displayName: Install Node.js 20.x
      inputs:
        versionSpec: '20.x'

    - script: |
        cd frontend
        npm install
        npm run build
      displayName: Build frontend

    - script: |
        cd backend
        npm install
        node dbInit.js
      displayName: Initialize database schema
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

    - script: |
        cd frontend
        CI=true npm test -- --watchAll=false
      displayName: Run frontend unit tests

    # Package backend (Node/Express) for deployment
    - task: ArchiveFiles@2
      displayName: Zip backend artefact
      inputs:
        rootFolderOrFile: backend
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'

    # Package frontend build output for deployment
    - task: ArchiveFiles@2
      displayName: Zip frontend artefact
      inputs:
        rootFolderOrFile: frontend/build
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'

    - task: PublishBuildArtifacts@1
      displayName: Publish artefacts
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

# ────────────────────────────────────────
# Deploy: push frontend + backend App Services
# ────────────────────────────────────────
- stage: Deploy
  displayName: Deploy the web application
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: ubuntu-20.04
    variables:
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop                # brings down backend.zip & frontend.zip

          - task: AzureWebApp@1
            displayName: Deploy backend App Service
            inputs:
              azureSubscription: 'Resource Manager'
              appType: webApp
              appName: $(BackendAppName)
              package: '$(Pipeline.Workspace)/drop/backend.zip'

          - task: AzureWebApp@1
            displayName: Deploy frontend App Service
            inputs:
              azureSubscription: 'Resource Manager connection name'
              appType: webApp
              appName: $(FrontendAppName)
              package: '$(Pipeline.Workspace)/drop/frontend.zip'
